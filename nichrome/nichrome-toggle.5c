/*
 * Copyright Â© 2008 Keith Packard
 *
 * This library is free software; you can redistribute it and/or
 * modify it either under the terms of the GNU Lesser General Public
 * License version 2.1 as published by the Free Software Foundation
 * (the "LGPL") or, at your option, under the terms of the Mozilla
 * Public License Version 1.1 (the "MPL"). If you do not alter this
 * notice, a recipient may use your version of this file under either
 * the MPL or the LGPL.
 *
 * You should have received a copy of the LGPL along with this library
 * in the file COPYING-LGPL-2.1; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 * You should have received a copy of the MPL along with this library
 * in the file COPYING-MPL-1.1
 *
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY
 * OF ANY KIND, either express or implied. See the LGPL or the MPL for
 * the specific language governing rights and limitations.
 *
 * The Original Code is the cairo graphics library.
 *
 * The Initial Developer of the Original Code is Keith Packard
 *
 * Contributor(s):
 *      Keith Packard <keithp@keithp.com>
 */

autoload Nichrome;
autoload Nichrome::Button;

extend namespace Nichrome {
    
    public namespace Toggle {

	public typedef Button::button_t + struct {
	    bool really_inside;
	} toggle_t;
	
	public void set (&toggle_t widget, bool pressed) {
	    if (pressed != widget.pressed)
	    {
		widget.pressed = pressed;
		widget.inside = widget.really_inside || widget.pressed;
		widget.callback (&widget, widget.pressed);
		Widget::redraw (&widget);
	    }
	}

	public void button (&toggle_t widget, &button_event_t event) {
	    enum switch (event.type) {
	    case press:
		if (event.button > 3)
		    break;
		set (&widget, !widget.pressed);
		break;
	    case release:
		if (event.button > 3)
		    break;
	    default:
		break;
	    }
	}

	public void motion (&toggle_t widget, &motion_event_t event) {
	    Button::motion (&widget, &event);
	    enum switch (event.type) {
	    case leaving:
	    case entering:
		widget.really_inside = widget.inside;
		widget.inside = widget.really_inside || widget.pressed;
		break;
	    default:
		break;
	    }
	}

	public void init (&toggle_t widget,
			  &nichrome_t nichrome,
			  string label,
			  Button::callback_t callback) {
	    Button::init (&widget, &nichrome, label, callback);
	    widget.button = button;
	    widget.motion = motion;
	}
	
	public *widget_t new (&nichrome_t nichrome,
			      string label,
			      Button::callback_t callback) {
	    toggle_t	widget;
	    init (&widget, &nichrome, label, callback);
	    return &widget;
	}
    }
}
