/*
 * Copyright Â© 2004 Keith Packard
 *
 * This library is free software; you can redistribute it and/or
 * modify it either under the terms of the GNU Lesser General Public
 * License version 2.1 as published by the Free Software Foundation
 * (the "LGPL") or, at your option, under the terms of the Mozilla
 * Public License Version 1.1 (the "MPL"). If you do not alter this
 * notice, a recipient may use your version of this file under either
 * the MPL or the LGPL.
 *
 * You should have received a copy of the LGPL along with this library
 * in the file COPYING-LGPL-2.1; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 * You should have received a copy of the MPL along with this library
 * in the file COPYING-MPL-1.1
 *
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY
 * OF ANY KIND, either express or implied. See the LGPL or the MPL for
 * the specific language governing rights and limitations.
 *
 * The Original Code is the cairo graphics library.
 *
 * The Initial Developer of the Original Code is Keith Packard
 *
 * Contributor(s):
 *      Keith Packard <keithp@keithp.com>
 */
    
autoimport Cairo;

import Image;

typedef struct {
    string		name;
    format_t		format;
    void(cairo_t)    	paint;
} image_test_t;

typedef struct {
    string		name;
    void(cairo_t)	test;
} quiet_test_t;

int test_width = 100;
int test_height = 100;

exception test_fail (string reason);

void test_check (bool ok, string reason, poly args ...) {
    if (!ok)
	raise test_fail (File::sprintf (reason, args ...));
}

pattern_t
make_a_pattern ()
{
    surface_t	surf = Image::surface_create (format_t.ARGB, 10, 10);
    cairo_t	cs = create (surf);

    set_source_rgba (cs, 1, 1, 1, 1);
    paint (cs);
    set_source_rgba (cs, 0, 0, 0, 1);
    move_to (cs, 0, 0);
    line_to (cs, 10, 10);
    line_to (cs, 10, 0);
    close_path (cs);
    fill (cs);
    destroy (cs);
    pattern_t pat = Pattern::create_for_surface (surf);
    Pattern::set_extend (pat, Pattern::extend_t.REPEAT);
    return pat;
}

image_test_t[] image_tests = {
    { 
	name = "line",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    set_source_rgb (cr, 1, 0, 0);
	    move_to (cr, 10, 10);
	    line_to (cr, 90, 90);
	    stroke (cr);
	}
    },
    {
	name = "box",
	format = format_t.RGB,
	paint = void func (cairo_t cr) {
	    set_source_rgb (cr, 0, 1, 0);
	    rectangle (cr, 5, 5, 60, 60);
	    fill (cr);
	}
    },
    {
	name = "circle",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    set_source_rgba (cr, 1, 1, 0, .5);
	    arc (cr, 50, 50, 30, 0, 2 * pi);
	    stroke (cr);
	}
    },
    {
	name = "append-path",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    path_t[*] path = {
		{move_to = {x = 25, y = 75}},
		{line_to = {x = 50, y = 25}},
		{line_to = {x = 75, y = 75}},
		{close_path = <>}
	    };
	    append_path (cr, path);
	    set_source_rgba (cr, 1, 0, 1, .8);
	    fill (cr);
	}
    },
    {
	name = "fill-preserve",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    rectangle (cr, 10, 10, 80, 80);
	    set_source_rgba (cr, 0, 1, 0, 1);
	    set_line_width (cr, 10);
	    fill_preserve (cr);
	    set_source_rgba (cr, 1, 0, 1, .5);
	    stroke (cr);
	}
    },
    {
	name = "stroke-preserve",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    rectangle (cr, 10, 10, 80, 80);
	    set_source_rgba (cr, 0, 1, 0, 1);
	    set_line_width (cr, 10);
	    stroke_preserve (cr);
	    set_source_rgba (cr, 1, 0, 1, .5);
	    fill (cr);
	}
    },
    {
	name = "clip",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    arc (cr, 50, 50, 30, 0, 2*pi);
	    clip (cr);
	    rectangle (cr, 10, 30, 80, 40);
	    set_source_rgba (cr, 1, 0, 0, 1);
	    fill (cr);
	}
    },
    {
	name = "fill-extents",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    arc (cr, 50, 50, 30, 0, 2*pi);
	    rect_t r = fill_extents (cr);
	    set_source_rgba (cr, 0, 0, 1, 1);
	    fill (cr);
	    rectangle (cr, r.x, r.y, r.width, r.height);
	    set_source_rgba (cr, 1, 1, 0, 0.5);
	    fill (cr);
	}
    },
    {
	name = "stroke-extents",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    arc (cr, 50, 50, 30, 0, 2*pi);
	    set_line_width (cr, 20);
	    rect_t r = stroke_extents (cr);
	    set_source_rgba (cr, 0, 0, 1, 1);
	    stroke (cr);
	    rectangle (cr, r.x, r.y, r.width, r.height);
	    set_source_rgba (cr, 1, 1, 0, 0.5);
	    fill (cr);
	}
    },
    {
	name = "set-source",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    pattern_t	pat = make_a_pattern ();
	    pattern_t	old = get_source (cr);
	    
	    set_source (cr, pat);
	    paint (cr);
	}
    },
};

quiet_test_t[] quiet_tests = {
    {
	name = "get-operator",
	test = void func (cairo_t cr) {
	    operator_t[*] operators = {
		operator_t.CLEAR, operator_t.SOURCE, operator_t.OVER,
		operator_t.IN, operator_t.OUT, operator_t.ATOP,
		operator_t.DEST, operator_t.DEST_OVER, operator_t.DEST_IN,
		operator_t.DEST_OUT, operator_t.DEST_ATOP, operator_t.XOR,
		operator_t.ADD, operator_t.SATURATE
	    };
	    for (int i = 0; i < dim (operators); i++) {
		set_operator (cr, operators[i]);
		test_check (get_operator (cr) == operators[i],
			    "get_operator returned wrong operator");
	    }
	}
    },
    {
	name = "get-source",
	test = void func (cairo_t cr) {
	    pattern_t	pat = make_a_pattern ();
	    pattern_t	old = get_source (cr);
	    
	    set_source (cr, pat);
	    test_check (get_source (cr) == pat,
			"get_source returned wrong pattern");
	}
    },
    {
	name = "get-tolerance",
	test = void func (cairo_t cr) {
	    for (real t = 11; t <= 81; t += 10) {
		set_tolerance (cr, t);
		test_check (get_tolerance (cr) == t,
			"get_tolerance returned wrong tolerance");
	    }
	}
    },
    {
	name = "get-current-point",
	test = void func (cairo_t cr) {
	    for (real x = 12; x < 82; x += 10) {
		for (real y = 13; y < 83; y += 10) {
		    move_to (cr, x, y);
		    point_t p = get_current_point (cr);
		    test_check (p.x == x && p.y == y,
			"get_current_point returned wrong point");
		}
	    }
	}
    },
    {
	name = "get-fill-rule",
	test = void func (cairo_t cr) {
	    fill_rule_t[*] rules = { fill_rule_t.WINDING, fill_rule_t.EVEN_ODD };
	    for (int i = 0; i < dim (rules); i++) {
		set_fill_rule (cr, rules[i]);
		test_check (get_fill_rule (cr) == rules[i],
			    "get_fill_rule returned wrong fill_rule");
	    }
	}
    },
    {
	name = "get-line-width",
	test = void func (cairo_t cr) {
	    for (real l = 1; l < 20; l++) {
		set_line_width (cr, l);
		test_check (get_line_width (cr) == l,
			    "get_line_width returned wrong width");
	    }
	}
    },
    {
	name = "get-matrix",
	test = void func (cairo_t cr) {
	    scale (cr, 2, 2);
	    matrix_t m = get_matrix (cr);
	    test_check (m.xx == 2 && m.yx == 0 &&
			m.xy == 0 && m.yy == 2 &&
			m.x0 == 0 && m.y0 == 0,
			"get_matrix returned wrong matrix");
	}
    }
};

bool
run_image_test (image_test_t t, string srcdir)
{
    printf ("%-20.20s ", t.name);
    twixt (surface_t out = surface_create (t.format, test_width, test_height);
	   Surface::destroy (out))
    {
	try {
	    twixt (cairo_t cr = create (out); destroy (cr))
		t.paint (cr);

	    try {
		twixt (surface_t ref = surface_create_from_png (srcdir + "/" +
						      t.name + "-ref.png");
		       Surface::destroy (ref)) 
		{
		    int	mask = t.format == format_t.RGB ? 0xffffff : ~0;

		    test_check (Surface::width (out) == Surface::width (ref),
				"width mismatch %d != %d", Surface::width(out),
				Surface::width (ref));
		    test_check (Surface::height (out) == Surface::height (ref),
				"height mismatch %d != %d", Surface::height(out),
				Surface::height (ref));
		    for (int y = 0; y < Surface::height (ref); y++)
			for (int x = 0; x < Surface::width (ref); x++) {
			    int out_p = Image::get_pixel (out, x, y) & mask;
			    int ref_p = Image::get_pixel (ref, x, y) & mask;
			    test_check (out_p == ref_p,
					"pixel mismatch 0x%x != 0x%x at %d %d",
					out_p, ref_p, x, y);
			}
		}
	    } catch File::open_error (string message, File::error_type error, 
				      string name) {
		raise test_fail (message + ": " + name);
	    } catch File::io_error (string message, File::error_type error,
				    file f) {
		raise test_fail (message);
	    }
	} catch test_fail (string reason) {
	    Surface::write_to_png (out, t.name + "-out.png");
	    printf (" failed: %s\n", reason);
	    return false;
	}
    }
    printf (" passed.\n");
    return true;
}

bool
run_quiet_test (quiet_test_t t, string srcdir)
{
    printf ("%-20.20s ", t.name);
    twixt (surface_t out = surface_create (format_t.ARGB, test_width, test_height);
	   Surface::destroy (out))
    {
	try {
	    twixt (cairo_t cr = create (out); destroy (cr))
		t.test (cr);
	} catch test_fail (string reason) {
	    printf (" failed: %s\n", reason);
	    return false;
	}
    }
    printf (" passed.\n");
    return true;
}

string srcdir = ".";

if (Environ::check ("SRCDIR")) srcdir = Environ::get ("SRCDIR");
if (dim (argv) > 1) srcdir = argv[1];

int
run_tests (string srcdir)
{
    int	failures = 0;
    
    for (int i = 0; i < dim (image_tests); i++)
	if (!run_image_test (image_tests[i], srcdir))
	    ++failures;
    for (int i = 0; i < dim (quiet_tests); i++)
	if (!run_quiet_test (quiet_tests[i], srcdir))
	    ++failures;
    return failures;
}

int i = run_tests (srcdir);
exit (i);
