/* $Id$
 *
 * Copyright Â© 2004 Keith Packard
 *
 * This library is free software; you can redistribute it and/or
 * modify it either under the terms of the GNU Lesser General Public
 * License version 2.1 as published by the Free Software Foundation
 * (the "LGPL") or, at your option, under the terms of the Mozilla
 * Public License Version 1.1 (the "MPL"). If you do not alter this
 * notice, a recipient may use your version of this file under either
 * the MPL or the LGPL.
 *
 * You should have received a copy of the LGPL along with this library
 * in the file COPYING-LGPL-2.1; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 * You should have received a copy of the MPL along with this library
 * in the file COPYING-MPL-1.1
 *
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY
 * OF ANY KIND, either express or implied. See the LGPL or the MPL for
 * the specific language governing rights and limitations.
 *
 * The Original Code is the cairo graphics library.
 *
 * The Initial Developer of the Original Code is Keith Packard
 *
 * Contributor(s):
 *      Keith Packard <keithp@keithp.com>
 */

autoimport Cairo;

const real off_x = -100;
const real off_y = 30;

void clear (cairo_t cr) {
    save (cr);
    identity_matrix (cr);
    set_rgb_color (cr, 1, 1, 1);
    rectangle (cr, 0, 0, width(cr), height(cr));
    fill (cr);
    restore (cr);
}

void picture (cairo_t cr)
{
    save (cr);
    
    set_rgb_color (cr, 0, 0, 0);
    move_to (cr, off_x, off_y);
#    show_text (cr, "nickle and cairo together");
    text_path (cr, "C");
    fill (cr);
#    show_text (cr, "CAIRO");
    
    move_to (cr, off_x, off_y);
    rel_line_to (cr, 250, 0);
    set_rgb_color (cr, 0, 0, 1);
    stroke (cr);
    
    move_to (cr, 5, 0);
    arc (cr, 5, 0, 5, 0, 10);
    set_rgb_color (cr, 1, 0, 0);
    fill (cr);
    restore (cr);
}

void transform (cairo_t cr, real t)
{
    translate (cr, 50, 50);
    rotate (cr, t * pi / 180);
}

void animate (cairo_t cr)
{
    cairo_t crl = create ();
    set_target_surface (crl, current_target_surface (cr));
    set_font (crl, "sans-12");
    set_rgb_color (crl, 0, 0, 0);
    real t = 0;
    for (;;)
    {
	disable (cr);
	save (cr);
	translate (cr, 100, 100);
	set_rgb_color (cr, 1, 1, 1);
	clear (cr);
	move_to (crl, 3, 20);
	show_text (crl, sprintf ("%5.2f", t));
	transform (cr, t);
	picture (cr);
	restore (cr);
	enable (cr);
	t += 1;
    }
}

void main ()
{
    cairo_t cr = new ();
    
    set_font (cr, "bitstream vera sans-200");
    animate (cr);
}

if (dim(argv) > 0) main ();
