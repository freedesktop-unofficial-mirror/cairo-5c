autoimport Cairo;

typedef struct {
    real    min, max, space;
} grid_t;

void grid (cairo_t cr, grid_t h, grid_t v)
{
    for (real x = h.min; x <= h.max; x += h.space)
    {
	move_to (cr, x, v.min);
	line_to (cr, x, v.max);
    }
    for (real y = v.min; y <= v.max; y += v.space)
    {
	move_to (cr, h.min, y);
	line_to (cr, h.max, y);
    }
    stroke (cr);
}

void dots (cairo_t cr, grid_t h, grid_t v, real size)
{
    for (real x = h.min; x <= h.max; x += h.space)
    {
	for (real y = v.min; y <= v.max; y += v.space)
	{
	    move_to (cr, x - size, y);
	    line_to (cr, x + size, y);
	    move_to (cr, x, y - size);
	    line_to (cr, x, y + size);
	}
    }
    stroke (cr);
}

void
grid_png (string filename, int width, int height, real major, real x_minor, y_minor)
{
    cairo_t cr = new_png (filename, width, height);
    set_line_width (cr, 2);
    grid (cr, 
	  (grid_t) { min = 0, max = width, space = major },
	  (grid_t) { min = 0, max = height, space = major });
    set_line_width (cr, 1);
    dots (cr, 
	  (grid_t) { min = 0.5 + x_minor//2, max = width + 0.5, space = x_minor },
	  (grid_t) { min = 0.5 + y_minor//2, max = height + 0.5, space = y_minor },
	  major / 20);
    destroy (cr);
}

grid_png ("grid.png", 1000, 1000, 90, 18, 30);

