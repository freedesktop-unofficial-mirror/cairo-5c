/* $Id$
 *
 * Copyright Â© 2005 Keith Packard
 *
 * This library is free software; you can redistribute it and/or
 * modify it either under the terms of the GNU Lesser General Public
 * License version 2.1 as published by the Free Software Foundation
 * (the "LGPL") or, at your option, under the terms of the Mozilla
 * Public License Version 1.1 (the "MPL"). If you do not alter this
 * notice, a recipient may use your version of this file under either
 * the MPL or the LGPL.
 *
 * You should have received a copy of the LGPL along with this library
 * in the file COPYING-LGPL-2.1; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 * You should have received a copy of the MPL along with this library
 * in the file COPYING-MPL-1.1
 *
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY
 * OF ANY KIND, either express or implied. See the LGPL or the MPL for
 * the specific language governing rights and limitations.
 *
 * The Original Code is the cairo graphics library.
 *
 * The Initial Developer of the Original Code is Keith Packard
 *
 * Contributor(s):
 *      Keith Packard <keithp@keithp.com>
 */
autoimport Cairo;

typedef struct {
    real    min, max, space;
} grid_t;

void grid (cairo_t cr, grid_t h, grid_t v)
{
    for (real x = h.min; x <= h.max; x += h.space)
    {
	move_to (cr, x, v.min);
	line_to (cr, x, v.max);
    }
    for (real y = v.min; y <= v.max; y += v.space)
    {
	move_to (cr, h.min, y);
	line_to (cr, h.max, y);
    }
    stroke (cr);
}

void dots (cairo_t cr, grid_t h, grid_t v, real size)
{
    for (real x = h.min; x <= h.max; x += h.space)
    {
	for (real y = v.min; y <= v.max; y += v.space)
	{
	    move_to (cr, x - size, y);
	    line_to (cr, x + size, y);
	    move_to (cr, x, y - size);
	    line_to (cr, x, y + size);
	}
    }
    stroke (cr);
}

void
grid_png (string filename, int width, int height, real major, real x_minor, y_minor)
{
    cairo_t cr = new_image (width, height);
    set_line_width (cr, 2);
    grid (cr, 
	  (grid_t) { min = 0, max = width, space = major },
	  (grid_t) { min = 0, max = height, space = major });
    set_line_width (cr, 1);
    dots (cr, 
	  (grid_t) { min = 0.5 + x_minor//2, max = width + 0.5, space = x_minor },
	  (grid_t) { min = 0.5 + y_minor//2, max = height + 0.5, space = y_minor },
	  major / 20);
    write_to_png (cr, filename);
    destroy (cr);
}

grid_png ("grid.png", 1000, 1000, 90, 18, 30);

