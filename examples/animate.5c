#!/usr/bin/env nickle
/* $Id$
 *
 * Copyright Â© 2004 Keith Packard
 *
 * This library is free software; you can redistribute it and/or
 * modify it either under the terms of the GNU Lesser General Public
 * License version 2.1 as published by the Free Software Foundation
 * (the "LGPL") or, at your option, under the terms of the Mozilla
 * Public License Version 1.1 (the "MPL"). If you do not alter this
 * notice, a recipient may use your version of this file under either
 * the MPL or the LGPL.
 *
 * You should have received a copy of the LGPL along with this library
 * in the file COPYING-LGPL-2.1; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 * You should have received a copy of the MPL along with this library
 * in the file COPYING-MPL-1.1
 *
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY
 * OF ANY KIND, either express or implied. See the LGPL or the MPL for
 * the specific language governing rights and limitations.
 *
 * The Original Code is the cairo graphics library.
 *
 * The Initial Developer of the Original Code is Keith Packard
 *
 * Contributor(s):
 *      Keith Packard <keithp@keithp.com>
 */

autoimport Cairo;

void clear (cairo_t cr) {
    save (cr);
    identity_matrix (cr);
    set_source_rgb (cr, 1, 1, 1);
    int w = width (cr);
    int h = height (cr);
    move_to (cr, 0, 0);
    line_to (cr, w, 0);
    line_to (cr, w, h);
    line_to (cr, 0, h);
    fill (cr);
    restore (cr);
}

void rectangle (cairo_t cr, real x, real y, real w, real h)
{
    move_to (cr, x, y);
    rel_line_to (cr, w, 0);
    rel_line_to (cr, 0, h);
    rel_line_to (cr, -w, 0);
    close_path (cr);
}

void picture (cairo_t cr)
{
    save (cr);
    set_source_rgb (cr, 0.6, .6, 1);
    move_to (cr, -10, 18);
    show_text (cr, "nickle");
    set_source_rgba (cr, 0, 0, 0, 0.5);
    rotate (cr, pi/2);
    move_to (cr, -10, -5);
    show_text (cr, "cairo");
    restore (cr);
}

void my_transform (cairo_t cr, real t)
{
    translate (cr, 50, 50);
    rotate (cr, t * pi / 60);
}

void animate (cairo_t cr, int n, int m)
{
    cr = dup (cr);
    set_font (cr, "Gadget-50");
    real t = 0;
    for (;;)
    {
	disable (cr);
	save (cr);
	translate (cr, n * 100, m * 100);
	set_source_rgb (cr, 1, 1, 1);
	rectangle (cr, 0, 0, 100, 100);
	clip (cr);
	rectangle (cr, 0, 0, 100, 100);
	fill (cr);
	my_transform (cr, t);
	picture (cr);
	restore (cr);
	enable (cr);
	sleep (100);
	t += n + m + 1;
    }
}

void main ()
{
    cairo_t cr = new ();
    
    fork animate (cr, 0, 0);
    fork animate (cr, 1, 0);
    fork animate (cr, 2, 0);
    fork animate (cr, 0, 1);
    fork animate (cr, 1, 1);
    thread t = fork animate (cr, 2, 1);
    Thread::join (t);
}

if (dim(argv) > 0) main ();
