/* $Id$
 *
 * Copyright Â© 2004 Keith Packard
 *
 * This library is free software; you can redistribute it and/or
 * modify it either under the terms of the GNU Lesser General Public
 * License version 2.1 as published by the Free Software Foundation
 * (the "LGPL") or, at your option, under the terms of the Mozilla
 * Public License Version 1.1 (the "MPL"). If you do not alter this
 * notice, a recipient may use your version of this file under either
 * the MPL or the LGPL.
 *
 * You should have received a copy of the LGPL along with this library
 * in the file COPYING-LGPL-2.1; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 * You should have received a copy of the MPL along with this library
 * in the file COPYING-MPL-1.1
 *
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY
 * OF ANY KIND, either express or implied. See the LGPL or the MPL for
 * the specific language governing rights and limitations.
 *
 * The Original Code is the cairo graphics library.
 *
 * The Initial Developer of the Original Code is Keith Packard
 *
 * Contributor(s):
 *      Keith Packard <keithp@keithp.com>
 */

if (!Command::valid_name ((string[]) { "Cairo" }))
    Foreign::load ("libcairo-5c.so");

extend namespace Cairo {
    
    public typedef void (real x, real y) move_to_func_t;
    public typedef void (real x, real y) line_to_func_t;
    public typedef void (real x1, real y1, real x2, real y2, real x3, real y3) curve_to_func_t;
    public typedef void () close_path_func_t;
    
    void walk_path (path_t  path,
		    move_to_func_t move_to,
		    line_to_func_t line_to,
		    curve_to_func_t curve_to,
		    close_path_func_t close_path)
    {
	while (path != path_t.end)
	{
	    union switch (path) {
	    case move_to m:
		move_to (m->x, m->y);
		path = m->next;
		break;
	    case line_to l:
		line_to (l->x, l->y);
		path = l->next;
		break;
	    case curve_to c:
		curve_to (c->x1, c->y1, c->x2, c->y2, c->x3, c->y3);
		path = c->next;
		break;
	    case close_path c:
		close_path ();
		path = c->next;
		break;
	    case end:
		break;
	    }
	}
    }

    public void current_path (cairo_t cr,
			      move_to_func_t move_to,
			      line_to_func_t line_to,
			      curve_to_func_t curve_to,
			      close_path_func_t close_path)
	/*
	 * Walk path calling provided functions for matching 
	 * elements sequentially
	 */
    {
	walk_path (current_path_list (cr),
		   move_to, line_to, curve_to, close_path);
    }
    
    public void current_path_flat (cairo_t cr,
				   move_to_func_t move_to,
				   line_to_func_t line_to,
				   close_path_func_t close_path)
	/*
	 * Walk path calling provided functions for matching 
	 * elements sequentially.  Curves are replaced by
	 * lines as needed to meet current_tolerance
	 */
    {
	void no_curve_to (real x1, real y1, real x2, real y2, real x2, real y3)
	{
	    abort ("flat paths have no curves", cr);
	}
	walk_path (current_path_flat_list (cr),
		   move_to, line_to, no_curve_to, close_path);
    }

    real[3] to_hsv(real r, real g, real b)
    {
	real minimum = min (r, g, b);
	real maximum = max (r, g, b);
	real v = maximum;
	real s = (maximum == 0) ? 0 : (maximum - minimum) / maximum;
	real h = 0;
	if (s != 0)
	{
	    switch (maximum) {
	    case r:	h =       (g - b) / (maximum - minimum);  break;
	    case g:	h = 2.0 + (b - r) / (maximum - minimum);  break;
	    case b:	h = 4.0 + (r - g) / (maximum - minimum);  break;
	    }
	    h = h / 6;
	}
	return (real[3]) { h, s, v };
    }

    /* convert hsv to rgb */

    real[3] from_hsv(real h, real s, real v)
    {
	if (v == 0.0)
	    return (real[3]) { 0 ... };
	else if (s == 0.0) {
	    return (real[3]) { v ... };
	} else {
	    real h6 = (h * 6) % 6;
	    int  i = floor (h6);
	    real f = h6 - i;
	    real p = v * (1 - s);
	    real q = v * (1 - (s * f));
	    real t = v * (1 - (s * (1 - f)));

	    switch(i) {
		default:return (real[3]) { v, t, p };
	    case 1: return (real[3]) { q, v, p };
	    case 2: return (real[3]) { p, v, t };
	    case 3: return (real[3]) { p, q, v };
	    case 4: return (real[3]) { t, p, v };
	    case 5: return (real[3]) { v, p, q };
	    }
	}
    }

    public void set_hsv_color (cairo_t cr, real h, real s, real v)
    {
	set_rgb_color (cr, from_hsv (h, s, v) ...);
    }

    public real[3] current_hsv_color (cairo_t cr)
    {
	return to_hsv (current_rgb_color (cr) ...);
    }
}
